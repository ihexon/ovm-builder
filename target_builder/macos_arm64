#! /usr/bin/env bash
if [[ $SKIP_APT_GET_INSTALL == "true" ]]; then
	echo '$SKIP_APT_GET_INSTALL == true, skip install required package'
else
	sudo -E apt update && sudo -E apt -y install wget kpartx zstd || {
		echo "Error: Install wget failed"
		exit 100
	}
fi

# one package one line
preinstalled_packages="
	bash
	podman
	dmesg
	procps
	findmnt
	blkid
	mount
	"
rootfs_url=""
bootable_url="https://github.com/oomol/builded/releases/download/v1.1/alpine_uefi_bootable.img.zst"
# the alpine_uefi_bootable.img.zst has ROOTFS and EFI partition
rootfs_part_uuid="d1e46927-eb5d-4fbf-986a-7e5581f37a16"
efi_part_uuid="6729-82AB"

# file_name:sha1sum
sha1sum="8eafdf68d20b327382a4a7fbd873803e49287b75  alpine_uefi_bootable.img.zst"

bootstrap_alpine() {
	rm -rf "$output/alpine_uefi_bootable.img.zst"
	wget -c "$bootable_url" --output-document="$output/alpine_uefi_bootable.img.zst"
	echo "$sha1sum" >$output/alpine_uefi_bootable.img.zst.sha1sum

	cd $output && sha1sum -c alpine_uefi_bootable.img.zst.sha1sum || {
		echo "Error: checksha1sum failed"
		exit 100
	} && cd $workspace

	cd $output && {
		# Decompress alpine_uefi_bootable.img.zst
		zstd -d -f alpine_uefi_bootable.img.zst || {
			echo "Decompress alpine_uefi_bootable.img.zst failed"
			exit 100
		}
		# Mapping the part into /dev/mapper/loopNpN
		kpartx -av alpine_uefi_bootable.img &&
			mount -m -U $rootfs_part_uuid ./target_rootfs &&
			mount -m -U $efi_part_uuid ./target_rootfs/boot/efi || {
			echo "Error: Mount alpine_uefi_bootable.img failed"
			exit 100
		}
	} && cd $workspace

	cd $output && {
		# Podman live in http://dl-cdn.alpinelinux.org/alpine/v3.20/community
		echo http://dl-cdn.alpinelinux.org/alpine/v3.20/community >>target_rootfs/etc/apk/repositories
	} && cd $workspace

	# Install required package into rootfs
	cd $output && {
		pkgs=$(echo $preinstalled_packages | xargs)
		if [[ $NATIVE_BUILD == true ]]; then
			set -x
			sudo -E proot --rootfs=./target_rootfs \
				-b /dev:/dev \
				-b /sys:/sys \
				-b /proc:/proc \
				-b /etc/resolv.conf:/etc/resolv.conf \
				-w /root \
				-0 /bin/su -c "apk update;apk add $pkgs" || {
				set +x
				echo "Error: proot into rootfs failed"
				exit 100
			}
		else
			set -x
			sudo -E proot --qemu=qemu-x86_64-static --rootfs=./target_rootfs \
				-b /dev:/dev \
				-b /sys:/sys \
				-b /proc:/proc \
				-b /etc/resolv.conf:/etc/resolv.conf \
				-w /root \
				-0 /bin/su -c "apk update;apk add $pkgs" || {
				set +x
				echo "Error: proot into rootfs failed"
				exit 100
			}
		fi
	} && cd $workspace
	sync
}

echo "=== Bootstrap Alpine ==="
if [[ -z $workspace ]] && [[ -z $output ]]; then
	echo 'Error: $workspace or $output empty'
	exit 100
fi

echo workspace: $workspace
echo output: $output
bootstrap_alpine
#copy_layer
#pack_rootfs
